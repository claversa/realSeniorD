// import React, { createContext, useContext, useState, useEffect } from "react";
// import {
//   getAuth,
//   initializeAuth,
//   getReactNativePersistence,
//   onAuthStateChanged,
//   setPersistence,
//   browserLocalPersistence,
// } from "firebase/auth";
// import { getApps, initializeApp, getApp } from "firebase/app";

// import ReactNativeAsyncStorage from "@react-native-async-storage/async-storage";
// import firebaseConfig from "./firebaseConfig";

// let app, auth;

// if (!getApps().length) {
//   try {
//     app = initializeApp(firebaseConfig);
//     auth = initializeAuth(app, {
//       persistence: getReactNativePersistence(AsyncStorage),
//     });
//   } catch (error) {
//     console.log("Error initializing app: " + error);
//   }
// } else {
//   app = getApp();
//   auth = getAuth(app);
// }

// setPersistence(auth, browserLocalPersistence)
//   .then(() => {
//     console.log("Auth persistence set to local.");
//   })
//   .catch((error) => {
//     console.error("Error setting auth persistence:", error);
//   });

// // Create context
// const AuthContext = createContext();

// export const AuthProvider = ({ children }) => {
//   const [user, setUser] = useState(null);
//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     const unsubscribe = onAuthStateChanged(auth, (authUser) => {
//       setUser(authUser);
//       setLoading(false);
//     });

//     return unsubscribe; // Cleanup subscription on unmount
//   }, []);

//   const login = async (email, password) => {
//     await signInWithEmailAndPassword(auth, email, password);
//   };

//   const signup = async (email, password) => {
//     await createUserWithEmailAndPassword(auth, email, password);
//   };

//   return (
//     <AuthContext.Provider value={{ user, login, signup }}>
//       {children}
//     </AuthContext.Provider>
//   );
// };

// // Hook to use auth context
// export const useAuth = () => useContext(AuthContext);

// export { auth };
// export default AuthContext;
